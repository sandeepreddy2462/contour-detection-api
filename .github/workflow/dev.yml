name: Build, Push, and Deploy to Cloud Run

on:
  push:
    branches: feature/hqsam-ec2-tuned
  workflow_dispatch:

env:
  PROJECT_ID: inductive-time-471009-u8
  REGION: us-east4
  REPO_NAME: fast-care
  IMAGE_NAME: fast-care
  SERVICE_NAME: fast-care
  # Removed IMAGE_URI definition to resolve YAML parsing error.
  # The full image path is constructed directly in steps 6 and 8.

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write # Required for Workload Identity Federation or Auth

    steps:
      # Step 1: Checkout code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Authenticate to Google Cloud
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          # Assuming you are using Workload Identity Federation. 
          # If not, use the key:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      # Step 4: Configure Docker to use Google Artifact Registry
      - name: Configure Docker for Google Artifact Registry
        run: gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev --quiet

      # Step 5: Cache Docker layers (using the existing setup)
      - name: Cache Docker layers
        uses: actions/cache@v4
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 6: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          # Note: This is where the two tags are created, resulting in multiple entries. This is okay.
          tags: |
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new

      # Step 7: Move cache
      - name: Move new cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache

      # Step 8: Deploy to Cloud Run (Creates the new revision)
      - name: Deploy to Cloud Run
        id: deploy
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: ${{ env.SERVICE_NAME }}
          # Constructed the image URI inline to avoid the top-level 'env' variable parsing issue
          image: ${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          region: ${{ env.REGION }}
          project_id: ${{ env.PROJECT_ID }}
          # Recommended flags for robust deployment
          flags: |
            --allow-unauthenticated 
            --ingress=all 
            # Removed --cpu-throttling flag as it conflicts with GPU requirements.

      # Step 9: Guarantee Traffic Routing to the new Revision (THE FIX)
      # This step explicitly forces 100% traffic to the LATEST ready revision, 
      # overriding any manual traffic splits that might have been set previously.
      - name: Route 100% Traffic to Latest Revision
        run: |
          gcloud run services update-traffic ${{ env.SERVICE_NAME }} \
            --region ${{ env.REGION }} \
            --to-latest
